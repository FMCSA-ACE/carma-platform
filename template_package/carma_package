#!/bin/bash

set -e

# This script is used to build a package for the CARMA platform.
# The script will create a new folder in the parent folder with the name of the package.
# After calling the script the new package should be immeadiatly buildable
# Usage: ./carma_package <this template_package path> <package name> <path to new package parent folder>

if [[ -z $BASH_VERSION  ]]; then
    echo "Bash version could not be checked. Please run this script using bash"
    exit 2
fi

if [[ "${BASH_VERSION:0:1}" -lt 4 ]]; then
    echo "Bash version 4 or higher is required.  Exiting."
    exit 2
fi


if [[ "$#" -ne 3 ]]; then
    echo "Incorrect inputs: Input must be of form <this template_package path> <package name> <path to new package parent folder>"
    exit 2
fi

template_package_path=$1

if [[ ! -d ${template_package_path} ]]; then
    echo "template_package directory ${template_package_path} DOES NOT exists." 
    exit 2
fi


package_name=$2

if [[ -z ${package_name} ]]; then
    echo "Package name not provided." 
    exit 2
fi

if [[ "${package_name}" =~ [^a-zA-Z0-9_\ ] ]]; then
  echo "Package name ${package_name} contains invalid characters. Must be alpha numeric with any spaces as underscores."
  exit 2
fi

package_parent_path=$3

if [[ ! -d ${package_parent_path} ]]; then
    echo "New package parent path directory ${package_parent_path} DOES NOT exists." 
    exit 2
fi

plugin_type=$4

if [ "$plugin_type" = "strategic" ] || [ "$plugin_type" = "tactical" ] || [ "$plugin_type" = "control" ]
   
    echo "Making plugin of type: $plugin_type"
    
elif [[ -z ${plugin_type} ]]; then

    echo "Plugin type not provided assuming standard node"
    plugin_type="none"

else
    echo "Plugin type not valid. Must be one of strategic, tactical, or control. If not making a plugin leave field empty" 
fi

target_path=$(realpath ${package_parent_path}/${package_name})

# Copy the template_package to the new package
cp -r ${template_package_path} ${target_path}

cd ${target_path}

current_year=$(date +"%Y")

if [[ $PWD != $(realpath ${target_path}) ]]; then
    echo "Failed to create target package directory. Check your path and permissions" 
    exit 2
fi

plugin_base_overrides = "bool get_availability() override;

    std::string get_name() override;

    std::string get_version_id() override;

    std::string get_capability() override;
    
    /**
     * \brief This method should be used to load parameters and will be called no the configure state transition.
     */ 
    carma_ros2_utils::CallbackReturn on_configure_plugin();

    /**
     * TODO for USER: The following lifecycle overrides are also available if needed
     * on_activate_plugin
     * on_deactivate_plugin
     * on_cleanup_plugin
     * on_shutdown_plugin
     * on_error_plugin
     */"

if [ "$plugin_type" = "strategic" ]

base_node_overrides = "    void plan_maneuvers_callback(
      std::shared_ptr<rmw_request_id_t>, 
      carma_planning_msgs::srv::PlanManeuvers::Request::SharedPtr, 
      carma_planning_msgs::srv::PlanManeuvers::Response::SharedPtr) override;

    $plugin_base_overrides
    "

base_node = "carma_guidance_plugins::StrategicPlugin"
base_node_header = "#include <carma_guidance_plugins/strategic_plugin.hpp>"

elif [ "$plugin_type" = "tactical" ]

base_node_overrides = "    void plan_trajectory_callback(
      std::shared_ptr<rmw_request_id_t>, 
      carma_planning_msgs::srv::PlanTrajectory::Request::SharedPtr, 
      carma_planning_msgs::srv::PlanTrajectory::Response::SharedPtr) override;

    $plugin_base_overrides
    "

base_node = "carma_guidance_plugins::TacticalPlugin"
base_node_header = "#include <carma_guidance_plugins/tactical_plugin.hpp>"

elif [ "$plugin_type" = "control" ]

base_node_overrides = "    autoware_msgs::msg::ControlCommandStamped generate_command() override;

    $plugin_base_overrides
    "

base_node = "carma_guidance_plugins::ControlPlugin"
base_node_header = "#include <carma_guidance_plugins/control_plugin.hpp>"

else

### Non-Plugin Base Node Substitutions ###
base_node_overrides = "    carma_ros2_utils::CallbackReturn handle_on_configure(const rclcpp_lifecycle::State &);

    /**
     * TODO for USER: The following lifecycle overrides are also available if needed
     * handle_on_activate
     * handle_on_deactivate
     * handle_on_cleanup
     * handle_on_shutdown
     * handle_on_error
     */
    "

base_node = "carma_ros2_utils::CarmaLifecycleNode"
base_node_header = "#include <carma_ros2_utils/carma_lifecycle_node.hpp>"

fi





# Perform substitutions
find . -type f -exec sed -i "s/<SUB><package_name>/${package_name}/g" {} \;
find . -type f -exec sed -i "s/<SUB><year>/${current_year}/g" {} \;
find . -type f -exec sed -i "s/<SUB><base_node_overrides>/${base_node_overrides}/g" {} \;
find . -type f -exec sed -i "s/<SUB><base_node_header>/${base_node_header}/g" {} \;
find . -type f -exec sed -i "s/<SUB><base_node>/${base_node}/g" {} \;

# Update file names for new package
shopt -s globstar
for f in ./**; do

    if [[ -d $f ]]; then
        continue
    fi

    new_name=$(echo $f | sed "s/template_package/${package_name}/g")
    directory_name=$(dirname $new_name)
    if [[ ! -d $directory_name ]]; then
        mkdir -p $directory_name
    fi

    if [[ $f != $new_name ]]; then
        mv $f $new_name
    fi
done

# Remove unused files
for d in ./**; do

    if [[ -f $d ]]; then
        continue
    fi

    if [[ "$d" == *"template_package"* ]]; then
        rm -r $d
    fi
done


rm CATKIN_IGNORE
rm COLCON_IGNORE
rm README.md
rm carma_package
mv ${package_name}_README.md README.md

# Notify user of success
echo "${package_name} created at ${target_path}"

